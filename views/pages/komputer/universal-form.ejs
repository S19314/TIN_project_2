<%- include('../../fragments/header.ejs')%>
    <main>
        <!--         <script type="application/javascript" src="/public/js/validationKomputerForm.js"></script>-->
        <!-- <script type="application/javascript" src="/public/js/validationKomputerForm.js"></script> -->
        <!-- <script type="application/javascript;charset=utf-8" src="../../../public/js/validationKomputerForm.js"></script> -->
        <!-- 
        <script type="application/javascript;charset=utf-8" src="/public/js/validationCommon.js"></script>
        <script type="application/javascript;charset=utf-8" src="/public/js/validationKomputerForm.js"></script>
-->
        <script>
            function resetErrors(inputs, errorTexts, errorInfo) {
                for (let i = 0; i < inputs.length; i++) {
                    inputs[i].classList.remove("error_input"); // Możliwe tutaj musze być "error-input"? // Изменил с error_input, на error-input
                }

                for (let i = 0; i < errorTexts.length; i++) {
                    errorTexts[i].innerText = "";
                }
                errorInfo.innerText = "";
            }

            function checkRequired(value) {
                if (!value) {
                    return false;
                }
                value = value.toString().trim();
                if (value === "") {
                    return false;
                }
                return true;
            }

            function checkTextLengthRange(value, min, max) {
                if (!value) {
                    return false;
                }
                value = value.toString().trim();
                const length = value.length;
                if (max && length > max) {
                    return false;
                }

                if (min && length < min) {
                    return false;
                }

                return true;
            }

            function checkDateIfAfter(value, compareTo) {
                if (!value) {
                    return false;
                }

                if (!compareTo) {
                    return false;
                }


                const valueDate = new Date(value);
                // valueDate = valueDate.setDate(value);
                const compareToDate = new Date(compareTo);
                // compareToDate = compareToDate.setDate(compareTo);

                if (valueDate.getTime() <= compareToDate.getTime()) { // Верно ли сравнивает? Мб сравнивает часы в сутках ( от 0 до 23 )
                    return false;
                }

                return true;
            }

            function checkNumber(value) {
                if (!value) {
                    return false;
                }

                if (isNaN(value)) {
                    return false;
                }

                return true;
            }

            function checkNumberRange(value, min, max) {
                if (!value) {
                    return false;
                }
                if (isNaN(value)) {
                    return false;
                }
                value = parseFloat(value);
                if (value < min) {
                    return false;
                }
                if (value > max) {
                    return false;
                }

                return true;
            }


            function checkDate(value) {
                if (!value) {
                    return false;
                }
                const pattern = /(\d{4})-(\d{2})-(\d{2})/;
                return pattern.test(value);
            }

            function validateForm() {

                const modelInput = document.getElementById('valueModel'); // 'model');
                const systemOperacyjnyInput = document.getElementById('systemOperacyjnyInput')
                const typKomputeraInput = document.getElementById('typKomputeraInput');
                let dataStworzeniaInput = document.getElementById('dataStworzeniaInput');


                const errorModel = document.getElementById('errorModel');
                const errorSystemOperacyjny = document.getElementById('errorSystemOperacyjny');
                const errorTypKomputera = document.getElementById('errorTypKomputera');
                const errorDataStworzenia = document.getElementById('errorDataStworzenia');


                const errorSummary = document.getElementById('errorSummary');

                resetErrors(
                    [modelInput, systemOperacyjnyInput, typKomputeraInput, dataStworzeniaInput],
                    [errorModel, errorSystemOperacyjny, errorTypKomputera, errorDataStworzenia],
                    errorSummary);

                var valid = true;

                if (!checkRequired(modelInput.value)) {
                    valid = false;
                    modelInput.classList.add("error-input");
                    errorModel.innerText = "Pole jest wymagane";
                } else if (!checkTextLengthRange(modelInput.value, 2, 60)) {
                    valid = false;
                    modelInput.classList.add("error-input");
                    errorModel.innerText = "Pole powinno zawierać od 2 do 60 znaków";
                }

                if (!checkRequired(systemOperacyjnyInput.value)) {
                    valid = false;
                    systemOperacyjnyInput.classList.add("error-input");
                    errorSystemOperacyjny.innerText = "Pole jest wymagane";
                } else if (!checkTextLengthRange(systemOperacyjnyInput.value, 2, 60)) {
                    valid = false;
                    systemOperacyjnyInput.classList.add("error-input");
                    errorSystemOperacyjny.innerText = "Pole powinno zawierać od 2 do 60 znaków";
                }

                if (!checkRequired(typKomputeraInput.value)) {
                    valid = false;
                    typKomputeraInput.classList.add("error-input");
                    errorTypKomputera.innerText = "Pole jest wymagane CLIENT SIDE";
                } else if (!checkTextLengthRange(typKomputeraInput.value, 2, 60)) {
                    valid = false;
                    typKomputeraInput.classList.add("error-input");
                    errorTypKomputera.innerText = "Pole powinno zawierać od 2 do 60 znaków";
                }

                if (!checkRequired(dataStworzeniaInput.value)) {
                    valid = false;
                    dataStworzeniaInput.classList.add("error-input");
                    errorDataStworzenia.innerText = "Pole jest wymagane";
                } else {
                    //  DOWN
                    let normalizationDataStworzeniaInput = new Date(dataStworzeniaInput.value);
                    normalizationDataStworzeniaInput.setDate(normalizationDataStworzeniaInput.getDate() + 1);
                    console.log("Normalization date");
                    console.log(normalizationDataStworzeniaInput);
                    console.log("NormalizationDate\nDate:");
                    console.log(normalizationDataStworzeniaInput);
                    console.log("dataStworzeniaInput\nBEFORE:");
                    console.log(dataStworzeniaInput.value);

                    dataStworzeniaInput.value = convertDateIntoStringLikeInView(normalizationDataStworzeniaInput);
                    console.log("dataStworzeniaInput\nAFTER:");
                    console.log(dataStworzeniaInput.value);
                    //  UP

                    let nowDate = new Date();
                    let tommorowDate = new Date();
                    tommorowDate.setDate(nowDate.getDate() + 1);

                    let month = '' + (tommorowDate.getMonth() + 1),
                        day = '' + tommorowDate.getDate(),
                        year = tommorowDate.getFullYear();

                    if (month.length < 2) month = '0' + month;
                    if (day.length < 2) day = '0' + day;
                    const tommorowString = [year, month, day].join('-');

                    if (!checkDate(dataStworzeniaInput.value)) {
                        valid = false;
                        dataStworzeniaInput.classList.add("error-input");
                        errorDataStworzenia.innerText = "Pole powinno zawierać datę w formacie MM-dd-yyyy (np. 2000-01-24)";
                    } else if (checkDateIfAfter(dataStworzeniaInput.value, tommorowString)) {
                        valid = false;
                        dataStworzeniaInput.classList.add("error-input");
                        errorDataStworzenia.innerText = "Data nie może być z przyszłości";
                    }
                }
                if (!valid) {
                    errorSummary.innerText = "Formularz zawiera błędy";
                }

                return valid;
            }
        </script>
        <h2>
            <%= pageTitle %>
        </h2>
        <form class=" form" method="post" action="<%=formAction%>" novalidate>
            <!--  onsubmit="return validateForm();" novalidate> -->
            <!--  onsubmit="return validateForm();"> -->

            <input type="hidden" name="_id" value="<%=komputer._id%>">
            <label for="valueModel">Model:<abbr title="required" aria-label="required">*</abbr></label>
            <input type="text"
                class="<%= validationErrors.find(komp => komp.path.includes('model')) ? 'error-input' : '' %>"
                list="model" name="model" placeholder="Model komputera" id="valueModel" value="<%=komputer.model%>"
                <%=(formMode=='showDetails' )? 'disabled' :''%> >

            <datalist id="model">
                <% for(let komp of allKomputers){ %>
                    <option value="<%=komp.model%>" <%=( komputer._id && komp._id.toString()==komputer._id.toString() )
                        ? 'selected' : '' %>>
                    </option>
                    <% } %>
            </datalist>
            <span id="errorModel" class="errors-text">
                <% if (validationErrors.find(komp=> komp.path.includes('model'))) { %>
                    <%= validationErrors.find(komp=> komp.path.includes('model')).message %>
                        <% } %>
            </span>


            <label for="systemOperacyjnyInput">Zainstalowany system operacyjny:<abbr title="required"
                    aria-label="required">*</abbr></label>

            <input type="text" list="systemOperacyjny" name="zaintstalowany_System_Operacyjny"
                class="<%= validationErrors.find(komp => komp.path.includes('zaintstalowany_System_Operacyjny')) ? 'error-input' : '' %>"
                placeholder="System operacyjny" id="systemOperacyjnyInput"
                value="<%=komputer.zaintstalowany_System_Operacyjny%>" <%=(formMode=='showDetails' ) ? 'disabled' : ''
                %>>
            <datalist id="systemOperacyjny">
                <% for(let komp of allKomputers){ %>
                    <option value="<%=komp.zaintstalowany_System_Operacyjny%>" <%=( komputer._id &&
                        komp._id.toString()==komputer._id.toString() ) ? 'selected' : '' %>>
                    </option>
                    <% } %>
            </datalist>
            <span id="errorSystemOperacyjny" class="errors-text">
                <% if (validationErrors.find(komp=> komp.path.includes('zaintstalowany_System_Operacyjny'))) { %>
                    <%= validationErrors.find(komp=> komp.path.includes('zaintstalowany_System_Operacyjny')).message %>
                        <% } %>
            </span>


            <label for="typKomputeraInput">Typ Komputera:<abbr title="required" aria-label="required">*</abbr></label>

            <input type="text"
                class="<%= validationErrors.find(komp => komp.path.includes('typ_Komputera')) ? 'error-input' : '' %>"
                list="typKomputera" name="typ_Komputera" placeholder="Typ Komputera" id="typKomputeraInput"
                value="<%=komputer.typ_Komputera%>" <%=(formMode=='showDetails' ) ? 'disabled' : '' %>>
            <datalist id="typKomputera">
                <% for(let komp of allKomputers){ %>
                    <option value="<%=komp.typ_Komputera%>" <%=( komputer._id &&
                        komp._id.toString()==komputer._id.toString() ) ? 'selected' : '' %>>
                    </option>
                    <% } %>
            </datalist>
            <span id="errorTypKomputera" class="errors-text">
                <% if (validationErrors.find(komp=> komp.path.includes('typ_Komputera'))) { %>
                    <%= validationErrors.find(komp=> komp.path.includes('typ_Komputera')).message %>
                        <% } %>
            </span>


            <label for="dataStworzeniaInput">Data stworzenia:<abbr title="required"
                    aria-label="required">*</abbr></label>
            <input type="text"
                class="<%= validationErrors.find(komp => komp.path.includes('data_Stworzenia')) ? 'error-input' : '' %>"
                name="data_Stworzenia" id="dataStworzeniaInput" placeholder="yyyy-mm-dd"
                value="<%=komputer.data_Stworzenia ? komputer.data_Stworzenia.toISOString().split('T')[0] : '' %>"
                <%=(formMode=='showDetails' ) ? 'disabled' : '' %>>
            <span id="errorDataStworzenia" class="errors-text">
                <% if (validationErrors.find(komp=> komp.path.includes('data_Stworzenia'))) { %>
                    <%= validationErrors.find(komp=> komp.path.includes('data_Stworzenia')).message %>
                        <% } %>
            </span>

            <div class="form-buttons">
                <p id="errorSummary" class="errors-text"></p>

                <% if (formMode !='showDetails' ) { %>
                    <input class="form-button-submit" type="submit" value="<%=btnLabel%>" />
                    <a class="form-button-cancel" href="/komputers">Anuluj</a>
                    <% } else { %>
                        <a href="/komputers/edit/<%=komputer._id%>" class="list-actions-button-edit">Edytuj</a>
                        <a class="list-actions-button-details" href="/komputers">Powrót</a>
                        <% } %>
            </div>
        </form>


        <% if (formMode=='showDetails' || formMode=='edit' ) { %>
            <h1>Szczegóły zestawa elementa i komputera</h1>
            <table class="table-list">
                <thead>
                    <tr>
                        <th>
                            Nazwa elementu
                        </th>
                        <th>
                            Aktualna temperatura elementa w kopmputerze
                        </th>
                        <th>
                            Procenty wykorzystanych procentów elementa komputerzem
                        </th>
                        <th>
                            Aktualna szybkość przekazania dannych między elementem komputera a komputerą
                        </th>
                        <th>
                            Typ połączenia
                        </th>
                    </tr>
                </thead>
                <tbody>
                <tbody>
                    <% for (let z_e_k of komputer.zestaw_elementow_komputera) { %>
                        <tr>
                            <td><a href="/komputer-element/details/<%= z_e_k.element_komputera._id %>">
                                    <%=z_e_k.element_komputera.nazwa%>
                                </a></td>
                            <td>
                                <%=z_e_k.aktuakna_Temperatura%>
                            </td>
                            <td>
                                <%=z_e_k.procent_Wykorzystanych_Zasobow%>
                            </td>
                            <td>
                                <%=z_e_k.aktualna_Szybkosc_Przekazania_Danych%>
                            </td>
                            <td>
                                <%=z_e_k.typPolaczenia%>
                            </td>
                        </tr>
                        <% } %>
                </tbody>
                </tbody>
            </table>
            <% } %>
    </main>

    <% - include('../../fragments/footer.ejs') %>